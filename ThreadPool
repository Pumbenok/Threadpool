//threadpool
#include <thread>
#include <mutex>
#include <vector>
#include <deque>
#include <functional>
#include <condition_variable>
#include <atomic>
#include <stdexcept>


#include <cassert>
#include <iostream>
#include <chrono>



using namespace std;

class ThreadPool {
public:
    ThreadPool(size_t threadCount) {
        full = threadCount;
        b = 1;


        for (size_t i = 0; i < full; i++)
        {
            threads.emplace_back([this]()
                {
                    if (this->IsActive())
                    {
                        while (true)
                        {
                            unique_lock<mutex> lock(mutex_);//  
                            /*while (queue_.empty() && b)
                            {
                                cv.wait(lock);
                            }*/
                            cv.wait(lock, [this]() {return !queue_.empty() || !b; });

                            if (queue_.empty() && !b)
                            {
                                return;
                            }
                            function<void()> task;
                            task = move(queue_.front());

                            queue_.pop_front();
                            

                            lock.unlock();
                            task();
                        }
                    }
                    
                }
            );

        }

    }
    /*~ThreadPool()
    {
        cv.notify_all();
        for (size_t i = 0; i < full; i++)
        {
            threads[i].join();
        }
        use.clear();
    }*/
    void PushTask(const std::function<void()>& task)
    {

        if (b)
        {
            unique_lock<mutex> lock(mutex_);
            queue_.push_back(task);
            lock.unlock();//
            cv.notify_one();
        }
        else
        {
            throw runtime_error("error dude");
        }

    }

    void Terminate(bool wait)
    {


        b = 0;
        if (wait)
        {

            cv.notify_all();
            for (auto& thread : threads) {
                if (thread.joinable())
                {
                    thread.join();
                }

            }

        }
        else
        {
            unique_lock<mutex> lock(mutex_);
            queue_.clear();
            lock.unlock();//ghjd
            cv.notify_all();
            for (auto& thread : threads)
            {
                if (thread.joinable())
                {
                    thread.join();
                }
            }
        }
    }

    bool IsActive() const
    {


        return b;//
    }

    size_t QueueSize() const
    {
        unique_lock<mutex> lock(mutex_);
        return queue_.size();
    }
private:
    deque<function<void()>> queue_;
    mutable mutex mutex_;
    atomic < size_t> kol = 0, full;
    condition_variable cv;
    atomic <bool> b = 1;
    vector<thread> threads;
    vector< size_t> use;

};

